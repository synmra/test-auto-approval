name: ðŸš€ Marktguru PR workflow

on:
  pull_request:
    types: [opened, reopened, closed]  # Trigger on PR creation, reopening, and closing
  
  pull_request_review:
    types: [submitted]  # Trigger when a review is submitted

permissions:
  pull-requests: write  # Allow workflow to approve PRs and add labels

jobs:
  add-label:
    runs-on: ubuntu-latest
    if: contains(fromJSON('["opened", "reopened", "synchronize"]'), github.event.action)
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      
      - name: Add label based on branch name
        run: |
          # Extract the branch name (e.g., feature/mr/1234 -> 1234)
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          FEATURE_NUMBER=$(echo "$BRANCH_NAME" | awk -F'/' '{print $NF}')
          PR_LABEL="feature-${FEATURE_NUMBER}"

          # Check if the label exists
          LABEL_EXISTS=$(gh label list --json name -q ".[] | select(.name == \"$PR_LABEL\")")

          if [ -z "$LABEL_EXISTS" ]; then
            # If the label doesn't exist, create it
            RANDOM_COLOR=$(printf "#%02x%02x%02x" $((RANDOM % 256)) $((RANDOM % 256)) $((RANDOM % 256)))

            echo "Label '$PR_LABEL' does not exist. Creating it now."
            gh label create "$PR_LABEL" --color "$RANDOM_COLOR" --description "Feature branch label: $PR_LABEL"
          else
            echo "Label '$PR_LABEL' already exists."
          fi
          
          gh pr edit ${{ github.event.pull_request.number }} --add-label "$PR_LABEL"
          echo "pr_label=$PR_LABEL" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  delete-temp-branch:
    runs-on: ubuntu-latest
    #if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'temp/*'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      
      - name: Delete temporary branch if PR is approved and merged
        run: |
          gh repo sync --force
          gh api --method DELETE "/repos/${{ github.repository }}/git/refs/heads/${{ github.event.pull_request.head.ref }}"
          
          git fetch --prune
          git push origin --delete ${{ github.event.pull_request.head.ref }}
              
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  auto-approve:
    runs-on: ubuntu-latest
    needs: add-label
    if: github.event.pull_request.base.ref == 'test' && contains(fromJSON('["opened", "reopened", "synchronize"]'), github.event.action)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get PR Label and Author
        id: pr_info
        run: |
          TEST_PR_TITLE="${{ github.event.pull_request.title }}"
          TEST_PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          TEST_PR_NUMBER="${{ github.event.pull_request.number }}"
          CURRENT_USER="${{ github.actor }}"

          echo "PR label: ${{ env.pr_label }}"
          echo "Test PR title: $TEST_PR_TITLE"
          echo "Test PR author: $TEST_PR_AUTHOR"
          echo "Test PR number: $TEST_PR_NUMBER"
          echo "Current user: $CURRENT_USER"

          echo "test_pr_number=$TEST_PR_NUMBER" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check for matching closed PR in integration
        id: check-pr
        run: |
          PR_LABEL="${{ env.pr_label }}"
          echo "Checking for closed PR with the label: '$PR_LABEL' on integration"

          # Fetch closed PR matching the label
          INTEGRATION_PRS=$(gh pr list --repo ${{ github.repository }} --base integration --state closed --json labels,number --jq \
            '[.[] | select(.labels[].name=="'"$PR_LABEL"'")]')

          PR_COUNT=$(echo "$INTEGRATION_PRS" | jq 'length')

          echo "Number of closed PRs with label '$PR_LABEL': $PR_COUNT"

          # If there is exactly one PR, proceed
          if [[ "$PR_COUNT" -eq 0 ]]; then
            echo "No closed PR found in integration with the label '$PR_LABEL'."
            echo "approve=false" >> $GITHUB_ENV
            exit 0
          elif [[ "$PR_COUNT" -eq 1 ]]; then
            INT_PR_NUMBER=$(echo "$INTEGRATION_PRS" | jq -r '.[0].number')
            echo "Matching closed PR found: #$INT_PR_NUMBER"
            echo "int_pr_number=$INT_PR_NUMBER" >> $GITHUB_ENV
            
            # Fetch PR reviews using `gh api`
            INT_PR_REVIEWS=$(gh api repos/${{ github.repository }}/pulls/$INT_PR_NUMBER/reviews --jq '[.[] | select(.state=="APPROVED")] | length')

            if [[ "$INT_PR_REVIEWS" -gt 0 ]]; then
              echo "Matching closed PR found in integration and it was approved."
              echo "approve=true" >> $GITHUB_ENV
            else
              echo "Matching closed PR found in integration, but it was not approved."
              echo "approve=false" >> $GITHUB_ENV
              exit 0
            fi
          fi
          
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Compare changed files and checksums
        id: compare-files
        run: |
          # Get PR numbers
          TEST_PR_NUMBER=${{ env.test_pr_number }} # From previous step
          INTEGRATION_PR_NUMBER=${{ env.int_pr_number }} # From previous step

          echo "Fetching changed files for PR #$TEST_PR_NUMBER (test) and PR #$INTEGRATION_PR_NUMBER (integration)..."

          # Get file lists
          INTEGRATION_FILES=$(gh pr view $INTEGRATION_PR_NUMBER --repo ${{ github.repository }} --json files --jq '.files[].path' | sort)
          TEST_FILES=$(gh pr view $TEST_PR_NUMBER --repo ${{ github.repository }} --json files --jq '.files[].path' | sort)

          echo "Files in integration PR:"
          echo "$INTEGRATION_FILES"

          echo "Files in test PR:"
          echo "$TEST_FILES"

          # Compare file lists
          if [[ "$INTEGRATION_FILES" != "$TEST_FILES" ]]; then
            echo "Files do not match!"
            echo "approve=false" >> $GITHUB_ENV
            exit 0
          fi

          MATCH=true
          for FILE in $INTEGRATION_FILES; do
            # Download raw file contents for both PRs
            gh pr checkout $INTEGRATION_PR_NUMBER
            INTEGRATION_CHECKSUM=$(sha256sum "$FILE" | awk '{print $1}')
            gh pr checkout $TEST_PR_NUMBER
            TEST_CHECKSUM=$(sha256sum "$FILE" | awk '{print $1}')

            echo "Checking file: $FILE"
            echo "Integration checksum: $INTEGRATION_CHECKSUM"
            echo "Test checksum: $TEST_CHECKSUM"

            if [[ "$INTEGRATION_CHECKSUM" != "$TEST_CHECKSUM" ]]; then
              MATCH=false
              echo "Checksum mismatch in file: $FILE"
              break
            fi
          done

          if [[ "$MATCH" == "false" ]]; then
            echo "File contents do not match (checksum mismatch)!"
            echo "approve=false" >> $GITHUB_ENV
          else
            echo "All files match in content and checksum!"
            echo "approve=true" >> $GITHUB_ENV
          fi
          
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-approve if PR matches
        if: env.approve == 'true'
        run: |
          echo "Auto-approving PR as matching closed PR found in integration and it was approved."
          gh pr review ${{ github.event.pull_request.number }} --approve
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  delete-feature-branch:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' && github.event.pull_request.merged == true && contains(fromJSON('["main", "master"]'), github.event.pull_request.base.ref)
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      
      - name: Delete feature branch if PR is approved and merged to main
        run: |
          gh repo sync --force
          gh api --method DELETE "/repos/${{ github.repository }}/git/refs/heads/${{ github.event.pull_request.head.ref }}"
          
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  assign-approver:
    runs-on: ubuntu-latest
    if: github.event.review.state == 'approved'  # Only trigger on approval
    steps:
      - name: Check Current Assignees
        id: check-assignees
        run: |
          echo "${{ github.event.review.state }}"
          
          APPROVER="${{ github.event.review.user.login }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          echo "approver=$APPROVER" >> $GITHUB_ENV
          echo "pr_number=$PR_NUMBER" >> $GITHUB_ENV

          echo "Checking if $APPROVER is already assigned to PR #$PR_NUMBER"

          # Get the current assignees list
          CURRENT_ASSIGNEES=$(gh pr view "$PR_NUMBER" --repo ${{ github.repository }} --json assignees --jq '.assignees[].login')

          # Check if the approver is already assigned
          if echo "$CURRENT_ASSIGNEES" | grep -qw "$APPROVER"; then
            echo "$APPROVER is already assigned. Skipping assignment."
            echo "assign=false" >> $GITHUB_ENV
          else
            echo "$APPROVER is not assigned. Assigning now."
            echo "assign=true" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Approver as an Assignee to PR
        if: env.assign == 'true'
        run: |
          echo "Assigning ${{ env.approver }} to PR ${{ env.pr_number }}"

          gh pr edit "${{ env.pr_number }}" --repo ${{ github.repository }} --add-assignee "${{ env.approver }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
